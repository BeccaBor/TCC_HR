// frontend/public/js/verificarLogin.js
document.addEventListener("DOMContentLoaded", async () => {
  console.log("üîç verificarLogin.js carregado. Verificando autentica√ß√£o..."); // LOG

  // Pegar token do LocalStorage, SessionStorage ou cookie
  let token = localStorage.getItem("token") || sessionStorage.getItem("token");
  if (!token && document.cookie.includes("token=")) {
    const match = document.cookie.match(/token=([^;]+)/);
    if (match) token = match[1];
  }

  console.log("üîë Token encontrado?", token ? `${token.substring(0, 20)}...` : "N√£o"); // LOG parcial

  // CORRIGIDO: Se n√£o houver token, n√£o faz nada (n√£o redireciona nem remove ‚Äì s√≥ loga)
  if (!token) {
    console.warn("‚ö†Ô∏è Nenhum token encontrado. P√°gina acess√≠vel sem autentica√ß√£o (ex: home)."); // LOG
    localStorage.removeItem("token"); // Limpa se houver resqu√≠cios
    sessionStorage.removeItem("token");
    return; // N√£o redireciona ‚Äì permite acesso p√∫blico
  }

  // CORRIGIDO: BACKEND_URL padronizado para 3000 + /api
  const BACKEND_URL = "http://localhost:3000";
  const urlValidacao = `${BACKEND_URL}/api/auth/me`; // CORRIGIDO: Adicionado /api
  console.log("üåê Validando token em:", urlValidacao); // LOG

  try {
    const res = await fetch(urlValidacao, {
      method: "GET", // Espec√≠fico para GET
      headers: { "Authorization": `Bearer ${token}` }
    });

    const data = await res.json();
    console.log("üì• Resposta de /api/auth/me:", data, "Status:", res.status); // LOG

    // CORRIGIDO: S√≥ remove token em 401 (inv√°lido/expirado). Em outros erros (ex: 500, rede), mant√©m
    if (res.status === 401) {
      console.warn("‚ùå Token inv√°lido (401). Removendo..."); // LOG
      localStorage.removeItem("token");
      sessionStorage.removeItem("token");
      // Opcional: Redireciona para home se em p√°gina protegida
      if (window.location.pathname !== "/" && window.location.pathname !== "/home") {
        window.location.href = "/";
      }
      return;
    }

    if (!res.ok || !data.success || !data.usuario) {
      console.warn("‚ö†Ô∏è Valida√ß√£o falhou (n√£o 200 ou sem dados). Mantendo token, mas sem redirecionamento."); // LOG
      return; // N√£o remove token ‚Äì pode ser erro tempor√°rio
    }

    const tipo = data.usuario.tipo_usuario?.toLowerCase();
    console.log("‚úÖ Token v√°lido. Tipo de usu√°rio:", tipo); // LOG

    // Redirecionamento condicional apenas se estiver na p√°gina errada
    const path = window.location.pathname;
    console.log("üìç P√°gina atual:", path); // LOG

    if (tipo === "gestor" && !path.startsWith("/gestor")) {
      console.log("üîÑ Redirecionando gestor para /gestor/documentacao"); // LOG
      window.location.href = "/gestor/documentacao";
    } else if (tipo === "colaborador" && !path.startsWith("/colaborador")) {
      console.log("üîÑ Redirecionando colaborador para /colaborador/holerites"); // LOG
      window.location.href = "/colaborador/holerites";
    } else {
      console.log("‚úÖ Usu√°rio na p√°gina correta. Sem redirecionamento."); // LOG
    }
  } catch (err) {
    console.error("‚ùå Erro ao validar token (rede/fetch):", err); // LOG
    // CORRIGIDO: N√ÉO remove token em erro de rede ‚Äì s√≥ loga
    console.warn("‚ö†Ô∏è Erro de conex√£o. Mantendo token para tentativas futuras.");
    // Opcional: Se quiser ser mais estrito, remova s√≥ se for erro espec√≠fico
  }
});