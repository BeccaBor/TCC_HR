<link rel="stylesheet" href="/css/solicitacoesCola.css">

<div class="page-wrapper">
  {{> navbarCola }}
  <main class="solicitacoes-page">
    <header class="solicitacoes-header">
      <div>
        <h1>Minhas Solicitações</h1>
        <p>Gerencie suas solicitações ao RH de forma rápida e organizada. Clique em um cartão para abrir o formulário.</p>
      </div>
    </header>

    <!-- linha de cards (navbar-like) -->
    <section class="sol-cards-row" role="navigation" aria-label="Tipos de solicitações">
      <!-- cada card tem data-type que o script usa -->
      <button class="sol-card" data-type="ferias" title="Pedido de Férias">
        <div class="sol-card-title">Pedido de Férias</div>
        <div class="sol-card-desc">Solicitar período de férias (siga CLT).</div>
      </button>

      <button class="sol-card" data-type="alteracao_dados" title="Alteração de Dados">
        <div class="sol-card-title">Alteração de Dados</div>
        <div class="sol-card-desc">Atualizar endereço, banco, telefone. Anexe comprovantes quando necessário.</div>
      </button>

      <button class="sol-card" data-type="banco_horas" title="Banco de Horas">
        <div class="sol-card-title">Banco de Horas</div>
        <div class="sol-card-desc">Solicitar extrato / visualização do saldo de horas.</div>
      </button>

      <button class="sol-card" data-type="reajuste_salarial" title="Pedido de Aumento">
        <div class="sol-card-title">Pedido de Aumento</div>
        <div class="sol-card-desc">Solicitação para revisão salarial (anexe justificativas).</div>
      </button>

      <button class="sol-card" data-type="outros" title="Outras Solicitações">
        <div class="sol-card-title">Outros</div>
        <div class="sol-card-desc">Outras solicitações ao departamento pessoal.</div>
      </button>
    </section>

    <!-- conteúdo principal: formulário (modal) será dinâmico, histórico abaixo -->
    <section class="sol-content">
      <div class="sol-forms-area">
        <!-- placeholder: instruções / call-to-action -->
        <div class="sol-instructions glass-panel">
          <h3>Como funciona</h3>
          <p>
            Clique em um cartão acima para abrir o formulário. Cada solicitação inclui campos mínimos e, quando pertinente,
            recomenda-se incluir documentos (ex.: atestado, comprovante bancário, justificativa).
          </p>
          <ul>
            <li><strong>Férias (CLT):</strong> preferível avisar com 30 dias úteis de antecedência.</li>
            <li><strong>Atestados:</strong> sempre anexar PDF ou imagem do documento.</li>
            <li><strong>Pedidos de aumento:</strong> anexe histórico de desempenho / justificativas.</li>
          </ul>
        </div>
      </div>

      <!-- HISTÓRICO (maior retângulo) -->
      <aside class="sol-history glass-panel" aria-live="polite">
        <h3>Solicitações Recentes</h3>
        <p class="muted">Acompanhe o status das solicitações enviadas</p>

        <div id="historyContainer" class="history-list">
          <div class="empty-placeholder">Carregando histórico...</div>
        </div>
      </aside>
    </section>
  </main>
</div>

<!-- Modal DINÂMICO: injetado pelo script quando o usuário clica -->
<!-- também incluí o template do modal aqui (será clonado pelo JS) -->
<template id="modalTemplate">
  <div class="modal-overlay" role="dialog" aria-modal="true">
    <div class="modal-panel glass-panel">
      <header class="modal-header">
        <h4 class="modal-title"></h4>
        <button class="modal-close" aria-label="Fechar">&times;</button>
      </header>

      <div class="modal-body">
        <!-- form dinamico será injetado -->
      </div>

      <footer class="modal-footer">
        <div class="modal-msg" aria-live="polite"></div>
        <div class="modal-actions">
          <button class="btn btn-outline cancel-btn">Cancelar</button>
          <button class="btn btn-primary submit-btn" disabled>Enviar Solicitação</button>
        </div>
      </footer>
    </div>
  </div>
</template>

<script>
(() => {
  const BACKEND_URL = '{{BACKEND_URL}}' || window.BACKEND_URL || 'http://localhost:3001';
  const API_BASE = (BACKEND_URL.endsWith('/api')) ? BACKEND_URL : (BACKEND_URL + '/api');

  // ------------------ Helpers ------------------
  const getToken = () => {
    try { return localStorage.getItem('token'); } catch (e) { return null; }
  };
  function buildAuthHeaders(extra = {}) {
    const headers = { ...extra };
    const token = getToken();
    if (token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
  }

  async function safeJsonResponse(res) {
    try { return await res.json(); } catch (e) { return null; }
  }
  function safeJsonParse(str) {
    try { return JSON.parse(str); } catch (e) { return null; }
  }
  function safeStringify(obj, maxLen = 20000) {
    try {
      const s = JSON.stringify(obj);
      return s.length > maxLen ? s.slice(0, maxLen) + '…' : s;
    } catch (e) { return '{}'; }
  }

  function escapeHtml(s) {
    return String(s || '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
      .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
  }

  function formatDateTime(val) {
    try {
      if (!val) return '—';
      const d = new Date(val);
      if (isNaN(d)) return String(val);
      return d.toLocaleString('pt-BR');
    } catch (e) { return String(val); }
  }
  function formatDate(val) {
    try {
      if (!val) return '—';
      const d = new Date(val);
      if (isNaN(d)) return String(val);
      return d.toLocaleDateString('pt-BR');
    } catch (e) { return String(val); }
  }

  function normalizeStatus(s) {
    if (!s) return 'Pendente';
    return String(s).trim();
  }
  function statusClassFrom(status) {
    const st = String(status || '').toLowerCase();
    if (st.includes('aprov')) return 'status-badge success';
    if (st.includes('rejeit') || st.includes('recus')) return 'status-badge danger';
    if (st.includes('em andamento') || st.includes('analise') || st.includes('em análise') || st.includes('pend')) return 'status-badge warning';
    if (st.includes('conclu')) return 'status-badge success';
    return 'status-badge warning';
  }

  // Normaliza formatos de anexos em array de { url, name }
  function normalizeAnexosField(anexos) {
    if (!anexos) return [];
    if (typeof anexos === 'string') return [{ url: anexos, name: anexos.split('/').pop() }];
    if (Array.isArray(anexos)) {
      return anexos.map(a => {
        if (typeof a === 'string') return { url: a, name: a.split('/').pop() };
        return { url: a.url || a.path || a.href || a.file || '', name: a.nome || a.name || (a.url||a.path||'').split('/').pop() || 'anexo' };
      }).filter(x => x.url);
    }
    // objeto simples
    return [{ url: anexos.url || anexos.path || anexos.href || '', name: anexos.nome || anexos.name || (anexos.url||anexos.path||'').split('/').pop() || 'anexo' }].filter(x => x.url);
  }

  // Normaliza as várias formas de resposta que o backend pode retornar
  function normalizeSolicitacoesResponse(raw) {
    if (!raw) return [];
    if (Array.isArray(raw)) return raw;
    if (raw.solicitacoes && Array.isArray(raw.solicitacoes)) return raw.solicitacoes;
    if (raw.data && Array.isArray(raw.data)) return raw.data;
    if (raw.items && Array.isArray(raw.items)) return raw.items;
    if (raw.solicitacao && typeof raw.solicitacao === 'object' && !Array.isArray(raw.solicitacao)) return [raw.solicitacao];
    if (raw.data && raw.data.solicitacao && typeof raw.data.solicitacao === 'object') return [raw.data.solicitacao];
    if (typeof raw === 'object') return [raw];
    return [];
  }

  // ------------------ Config e specs ------------------
  const modalTemplate = document.getElementById('modalTemplate');

  const TYPE_LABELS = {
    ferias: 'Pedido de Férias',
    alteracao_dados: 'Alteração de Dados',
    banco_horas: 'Consulta - Banco de Horas',
    consulta_banco_horas: 'Consulta - Banco de Horas',
    reajuste_salarial: 'Pedido de Reajuste Salarial',
    desligamento: 'Desligamento',
    reembolso: 'Reembolso',
    outros: 'Outros'
  };

  const formSpecs = {
    ferias: {
      title: 'Pedido de Férias',
      description: 'Informe o período desejado. CLT: recomenda-se 30 dias úteis de antecedência.',
      fields: [
        { name: 'data_inicio', type: 'date', label: 'Data início', required: true },
        { name: 'data_fim', type: 'date', label: 'Data término', required: true },
        { name: 'observacao', type: 'textarea', label: 'Observações (opcional)', required: false },
        { name: 'anexo', type: 'file', label: 'Anexar documento (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    alteracao_dados: {
      title: 'Alteração de Dados Pessoais',
      description: 'Atualize dados como endereço, banco e telefone. Anexe comprovante quando necessário.',
      fields: [
        { name: 'campo', type: 'select', label: 'Campo a alterar', options: ['Endereço','Telefone','Banco','Outro'], required: true },
        { name: 'novo_valor', type: 'text', label: 'Novo valor', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar comprovante (se houver)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    banco_horas: {
      title: 'Solicitação - Banco de Horas',
      description: 'Peça o extrato ou visualização do saldo de horas acumuladas.',
      fields: [
        { name: 'periodo_inicio', type: 'date', label: 'Período - início (opcional)', required: false },
        { name: 'periodo_fim', type: 'date', label: 'Período - fim (opcional)', required: false },
        { name: 'observacao', type: 'textarea', label: 'Observações (opcional)', required: false }
      ]
    },
    reajuste_salarial: {
      title: 'Pedido de Reajuste Salarial',
      description: 'Solicitação para revisão salarial — anexe justificativas e histórico de desempenho quando houver.',
      fields: [
        { name: 'salario_solicitado', type: 'number', label: 'Salário desejado (R$)', required: true },
        { name: 'justificativa', type: 'textarea', label: 'Justificativa', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar documentos (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    outros: {
      title: 'Outra Solicitação',
      description: 'Descreva sua solicitação ao departamento pessoal.',
      fields: [
        { name: 'titulo', type: 'text', label: 'Título da solicitação', required: true },
        { name: 'descricao', type: 'textarea', label: 'Descrição', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    }
  };

  // ------------------ Modal de criação ------------------
  function openModalFor(typeKey) {
    const spec = formSpecs[typeKey];
    if (!spec || !modalTemplate) { console.warn('Spec/modal inexistente', typeKey); return; }

    const node = modalTemplate.content.cloneNode(true);
    const overlay = node.querySelector('.modal-overlay');
    const titleEl = node.querySelector('.modal-title');
    const body = node.querySelector('.modal-body');
    const closeBtn = node.querySelector('.modal-close');
    const cancelBtn = node.querySelector('.cancel-btn');
    const submitBtn = node.querySelector('.submit-btn');
    const msgEl = node.querySelector('.modal-msg');

    titleEl.textContent = spec.title;

    const form = document.createElement('form');
    form.className = 'sol-form';
    form.enctype = 'multipart/form-data';
    form.autocomplete = 'off';
    form.innerHTML = `<p class="muted">${spec.description}</p>`;

    spec.fields.forEach(f => {
      const div = document.createElement('div'); div.className = 'form-field';
      const label = document.createElement('label'); label.textContent = f.label || f.name; label.htmlFor = 'field_' + f.name;
      div.appendChild(label);

      let input;
      if (f.type === 'textarea') { input = document.createElement('textarea'); input.rows = 4; }
      else if (f.type === 'select') {
        input = document.createElement('select');
        (f.options || []).forEach(opt => { const o = document.createElement('option'); o.value = opt; o.textContent = opt; input.appendChild(o); });
      } else {
        input = document.createElement('input'); input.type = f.type || 'text';
        if (f.type === 'file' && f.accept) input.accept = f.accept;
        if (f.type === 'number') input.step = '0.01';
      }
      input.id = 'field_' + f.name; input.name = f.name;
      if (f.required) input.required = true;
      div.appendChild(input);
      form.appendChild(div);
    });

    const hiddenType = document.createElement('input');
    hiddenType.type = 'hidden'; hiddenType.name = 'tipo'; hiddenType.value = typeKey;
    form.appendChild(hiddenType);

    body.appendChild(form);
    document.body.appendChild(overlay);

    // foco e validação
    const firstInput = form.querySelector('input,textarea,select'); if (firstInput) firstInput.focus();
    function updateSubmitState() { submitBtn.disabled = !form.checkValidity(); }
    form.querySelectorAll('input,textarea,select').forEach(inp => { inp.addEventListener('input', updateSubmitState); inp.addEventListener('change', updateSubmitState); });
    updateSubmitState();

    // envio
    async function onSubmit(e) {
      e.preventDefault();
      submitBtn.disabled = true; msgEl.style.color = ''; msgEl.textContent = 'Enviando...';

      try {
        const fd = new FormData(form);
        const maxMB = (window.MAX_UPLOAD_MB || 15);
        for (const [k, v] of fd.entries()) {
          if (v instanceof File && v.size && v.size > maxMB * 1024 * 1024) {
            msgEl.textContent = `Arquivo muito grande. Máx ${maxMB} MB.`;
            submitBtn.disabled = false; return;
          }
        }

        const res = await fetch(`${API_BASE}/solicitacoes`, {
          method: 'POST',
          headers: buildAuthHeaders({}), // don't set content-type
          body: fd,
          credentials: 'include'
        });
        const data = await safeJsonResponse(res);
        if (!res.ok) {
          const errMsg = (data && (data.erro || data.message)) || `Erro ${res.status}`;
          msgEl.textContent = `Erro ao enviar a solicitação: ${errMsg}`;
          submitBtn.disabled = false;
          return;
        }

        msgEl.style.color = '#bfe6ca';
        msgEl.textContent = 'Solicitação enviada com sucesso!';
        await carregarHistorico();
        setTimeout(cleanup, 900);
      } catch (err) {
        console.error('Erro envio:', err);
        msgEl.textContent = 'Erro ao enviar a solicitação. Tente novamente.';
        submitBtn.disabled = false;
      }
    }

    form.addEventListener('submit', onSubmit);
    const onClickSubmit = (ev) => { ev.preventDefault(); if (!form.checkValidity()) { form.reportValidity?.(); return; } form.requestSubmit(); };
    submitBtn.addEventListener('click', onClickSubmit);

    function cleanup() {
      form.removeEventListener('submit', onSubmit);
      submitBtn.removeEventListener('click', onClickSubmit);
      cancelBtn.removeEventListener('click', onCancel);
      closeBtn.removeEventListener('click', onCancel);
      document.removeEventListener('keydown', onKey);
      overlay.remove();
    }
    function onCancel(e) { e?.preventDefault(); cleanup(); }
    closeBtn.addEventListener('click', onCancel);
    cancelBtn.addEventListener('click', onCancel);

    const onKey = (ev) => { if (ev.key === 'Escape') cleanup(); };
    document.addEventListener('keydown', onKey);
    overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(); });
  }

  // ------------------ Modal de visualização ------------------
  async function openViewModal(solicitacaoOrId) {
    // se recebeu id -> busca e re-chama
    if (typeof solicitacaoOrId === 'string' || typeof solicitacaoOrId === 'number') {
      const id = solicitacaoOrId;
      try {
        const res = await fetch(`${API_BASE}/solicitacoes/${encodeURIComponent(id)}`, {
          headers: buildAuthHeaders({ 'Accept': 'application/json' }),
          credentials: 'include'
        });
        const data = await safeJsonResponse(res) || {};
        const detal = data.solicitacao || data.data || data || {};
        return openViewModal(detal);
      } catch (err) {
        console.warn('Erro ao buscar detalhe por id:', err);
        return; // não mostra modal vazio
      }
    }

    const solicitacao = solicitacaoOrId;
    if (!solicitacao) {
      console.warn('Solicitação inválida para visualização');
      return;
    }

    // remove modais anteriores
    document.querySelectorAll('.modal-overlay').forEach(el => el.remove());

    const tipoKey = (solicitacao.tipo || solicitacao.tipo_solicitacao || solicitacao.tipoKey || 'outros').toString().toLowerCase();
    const tipoLabel = TYPE_LABELS[tipoKey] || (solicitacao.titulo || 'Solicitação');
    const status = normalizeStatus(solicitacao.status || solicitacao.estado || solicitacao.situacao);
    const dataSolic = solicitacao.created_at || solicitacao.data_solicitacao || solicitacao.data_criacao || solicitacao.createdAt;
    const dataFormatada = formatDateTime(dataSolic);

    const anexos = normalizeAnexosField(solicitacao.anexos || solicitacao.anexo || solicitacao.anexo_path || solicitacao.files || solicitacao.attachment);
    let anexosHtml = '<p><strong>Anexos:</strong> Nenhum arquivo enviado</p>';
    if (anexos.length) {
      anexosHtml = '<p><strong>Anexos:</strong></p><ul class="anexo-lista">';
      anexos.forEach(a => {
        const safeUrl = escapeHtml(a.url);
        const safeName = escapeHtml(a.name || a.nome || (a.url||'').split('/').pop());
        anexosHtml += `<li><a href="${safeUrl}" target="_blank" rel="noopener noreferrer" class="btn btn-outline" download>📎 ${safeName}</a></li>`;
      });
      anexosHtml += '</ul>';
    }

    const partes = [];
    partes.push(`<p><strong>Tipo:</strong> ${escapeHtml(tipoLabel)}</p>`);
    partes.push(`<p><strong>Status:</strong> ${escapeHtml(status)}</p>`);
    partes.push(`<p><strong>Data da Solicitação:</strong> ${escapeHtml(dataFormatada)}</p>`);

    if (solicitacao.salario_solicitado !== undefined && solicitacao.salario_solicitado !== null) {
      const num = Number(solicitacao.salario_solicitado);
      if (!isNaN(num)) partes.push(`<p><strong>Salário Solicitado:</strong> R$ ${num.toFixed(2)}</p>`);
    }
    if (solicitacao.campo) partes.push(`<p><strong>Campo a Alterar:</strong> ${escapeHtml(solicitacao.campo)}</p>`);
    if (solicitacao.novo_valor) partes.push(`<p><strong>Novo Valor:</strong> ${escapeHtml(solicitacao.novo_valor)}</p>`);
    if (solicitacao.titulo) partes.push(`<p><strong>Título:</strong> ${escapeHtml(solicitacao.titulo)}</p>`);
    if (solicitacao.descricao) partes.push(`<p><strong>Descrição:</strong><br>${escapeHtml(solicitacao.descricao)}</p>`);
    if (solicitacao.justificativa) partes.push(`<p><strong>Justificativa:</strong><br>${escapeHtml(solicitacao.justificativa)}</p>`);
    if (solicitacao.observacao) partes.push(`<p><strong>Observações:</strong><br>${escapeHtml(solicitacao.observacao)}</p>`);
    if (solicitacao.periodo_inicio) partes.push(`<p><strong>Período Início:</strong> ${escapeHtml(formatDate(solicitacao.periodo_inicio))}</p>`);
    if (solicitacao.periodo_fim) partes.push(`<p><strong>Período Fim:</strong> ${escapeHtml(formatDate(solicitacao.periodo_fim))}</p>`);
    if (solicitacao.data_inicio) partes.push(`<p><strong>Data Início:</strong> ${escapeHtml(formatDate(solicitacao.data_inicio))}</p>`);
    if (solicitacao.data_fim) partes.push(`<p><strong>Data Fim:</strong> ${escapeHtml(formatDate(solicitacao.data_fim))}</p>`);

    const corpoDetalhes = `
      <div class="solicitacao-detalhes">
        ${partes.join('')}
        ${anexosHtml}
      </div>
    `;

    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    overlay.innerHTML = `
      <div class="modal-panel glass-panel" role="dialog" aria-modal="true" aria-label="Detalhes da solicitação">
        <header class="modal-header">
          <h4 class="modal-title">Detalhes da Solicitação</h4>
          <button class="modal-close" aria-label="Fechar">&times;</button>
        </header>
        <div class="modal-body">${corpoDetalhes}</div>
        <footer class="modal-footer">
          <button class="btn btn-primary fechar-btn">Fechar</button>
        </footer>
      </div>
    `;
    document.body.appendChild(overlay);

    const modalPanel = overlay.querySelector('.modal-panel');
    const closeBtn = overlay.querySelector('.modal-close');
    const fecharBtn = overlay.querySelector('.fechar-btn');

    const closeModal = () => overlay.remove();
    [closeBtn, fecharBtn].forEach(btn => btn && btn.addEventListener('click', closeModal, { once: true }));
    overlay.addEventListener('click', e => { if (e.target === overlay) closeModal(); });
    document.addEventListener('keydown', function onKey(e) { if (e.key === 'Escape') { closeModal(); document.removeEventListener('keydown', onKey); } });

    if (modalPanel && modalPanel.animate) {
      modalPanel.animate([{ transform: 'scale(0.95)', opacity: 0 }, { transform: 'scale(1)', opacity: 1 }], { duration: 180, easing: 'ease-out' });
    }
  }

  // ------------------ Histórico: carregar e renderizar ------------------
async function carregarHistorico() {
  const lista = document.getElementById('historyContainer');
  if (!lista) return;
  lista.innerHTML = `<div class="loading">⏳ Carregando histórico...</div>`;

  const endpoints = [
    `${API_BASE}/solicitacoes/minhas`,
    `${API_BASE}/solicitacoes/usuario`,
    `${API_BASE}/solicitacoes/me`,
    `${API_BASE}/solicitacoes`
  ];

  // normaliza possíveis variantes de tipo para uma chave canônica
  function normalizeTipoKey(raw) {
    if (!raw && raw !== 0) return 'outros';
    const s = String(raw).toLowerCase().trim();
    if (!s) return 'outros';

    // mapeamentos e heurísticas
    if (/feri/i.test(s)) return 'ferias';
    if (/alterac|alteração|alteracao|update|atualiza/i.test(s)) return 'alteracao_dados';
    if (/banco.*hora|banc.*hora|banco_horas|consulta_banco_horas|saldo.*hora/i.test(s)) return 'banco_horas';
    if (/reajust|aument|salari|salário|salario/i.test(s)) return 'reajuste_salarial';
    if (/deslig|rescis/i.test(s)) return 'desligamento';
    if (/reembols|reembolso/i.test(s)) return 'reembolso';
    // se já for "outros"
    if (/outro|other/i.test(s)) return 'outros';

    // algumas APIs usam chaves com underline/hyphen -> normaliza
    const map = {
      'reajuste-salarial': 'reajuste_salarial',
      'reajuste_salarial': 'reajuste_salarial',
      'consulta_banco_horas': 'banco_horas',
      'consulta-banco-horas': 'banco_horas',
      'alteracao_dados': 'alteracao_dados',
      'alteracao-dados': 'alteracao_dados'
    };
    if (map[s]) return map[s];

    // fallback: se contém 'salari' ou 'aumento' pegamos reajuste
    if (s.includes('salari') || s.includes('aumento') || s.includes('reajust')) return 'reajuste_salarial';

    // se for uma label amigável (ex.: "Pedido de Aumento"), detecta
    if (s.includes('aumento') || s.includes('pedido de aumento') || s.includes('pedido aumento')) return 'reajuste_salarial';

    return 'outros';
  }

  let normalized = [];
  for (const url of endpoints) {
    try {
      const res = await fetch(url, {
        headers: buildAuthHeaders({ 'Accept': 'application/json' }),
        credentials: 'include'
      });
      if (!res.ok) continue;
      const raw = await safeJsonResponse(res);
      if (!raw) continue;
      const arr = normalizeSolicitacoesResponse(raw);
      if (Array.isArray(arr)) { normalized = arr; break; }
    } catch (err) {
      console.warn('Erro tentando endpoint', url, err);
      continue;
    }
  }

  if (!Array.isArray(normalized) || normalized.length === 0) {
    lista.innerHTML = `<p class="muted">Nenhuma solicitação encontrada.</p>`;
    return;
  }

  // Ordena por data (mais recente primeiro). Usa vários campos possíveis.
  const withDates = normalized.map(item => {
    const dataCriacao = item.created_at || item.data_solicitacao || item.data_criacao || item.createdAt || null;
    const parsed = dataCriacao ? new Date(dataCriacao) : new Date(0);
    return { item, date: isNaN(parsed) ? new Date(0) : parsed };
  });

  withDates.sort((a, b) => b.date - a.date);

  // Pegamos apenas os 3 primeiros (últimas 3)
  const top3 = withDates.slice(0, 3).map(x => x.item);

  lista.innerHTML = '';
  top3.forEach(solicitacao => {
    // normaliza/identifica tipo corretamente (corrige bug do reajuste)
    const rawTipo = solicitacao.tipo || solicitacao.tipo_solicitacao || solicitacao.tipoKey || solicitacao.tipo_label || '';
    const tipoKey = normalizeTipoKey(rawTipo);
    const titulo = solicitacao.titulo || TYPE_LABELS?.[tipoKey] || (solicitacao.tipo_label || 'Solicitação');
    const status = normalizeStatus(solicitacao.status || solicitacao.estado || solicitacao.situacao);
    const statusClass = statusClassFrom(status);
    const dataCriacao = solicitacao.created_at || solicitacao.data_solicitacao || solicitacao.data_criacao || solicitacao.createdAt;
    const dataFormatada = formatDateTime(dataCriacao);

    // id heurístico
    const id = solicitacao.id || solicitacao._id || solicitacao.solicitacao_id || solicitacao.id_solicitacao || null;

    const card = document.createElement('div');
    card.className = 'history-item glass-item';
    card.tabIndex = 0;
    if (id) card.setAttribute('data-solicitacao-id', id);

    const small = {
      id,
      titulo,
      tipo: tipoKey,
      status,
      dataCriacao,
      resumo: solicitacao.resumo || solicitacao.descricao || solicitacao.titulo || ''
    };
    card.setAttribute('data-solicitacao', safeStringify(small, 2000));

    card.innerHTML = `
      <div class="solicitacao-header">
        <span class="tipo-solicitacao">${escapeHtml(titulo)}</span>
        <span class="${statusClass}">${escapeHtml(status)}</span>
      </div>
      <div class="solicitacao-body">
        <small>${escapeHtml(dataFormatada)}</small>
        ${solicitacao.resumo ? `<div class="resumo">${escapeHtml(solicitacao.resumo)}</div>` : ''}
      </div>
      <div class="solicitacao-actions">
        <button class="btn btn-sm btn-outline view-btn" aria-label="Ver detalhes">🔍 Ver detalhes</button>
      </div>
    `;
    lista.appendChild(card);
  });
}

  // ------------------ Delegação única para o histórico ------------------
  function attachHistoryDelegation() {
    const historyContainer = document.getElementById('historyContainer');
    if (!historyContainer) return;

    // clique delegador
    async function historyClickHandler(ev) {
      const item = ev.target.closest('.history-item');
      if (!item) return;

      const id = item.getAttribute('data-solicitacao-id');
      if (id) {
        try {
          const res = await fetch(`${API_BASE}/solicitacoes/${encodeURIComponent(id)}`, {
            headers: buildAuthHeaders({ 'Accept': 'application/json' }),
            credentials: 'include'
          });
          const data = await safeJsonResponse(res);
          if (res.ok && data) {
            const detal = data.solicitacao || data.data || data || {};
            return openViewModal(detal);
          }
        } catch (err) {
          console.warn('Erro ao buscar detalhe por id:', err);
        }
      }

      // fallback: usa o snapshot pequeno
      const raw = item.getAttribute('data-solicitacao');
      const small = safeJsonParse(raw) || {};
      openViewModal(small);
    }

    // Enter key abre item
    function historyKeyHandler(ev) {
      if (ev.key !== 'Enter') return;
      const item = ev.target.closest('.history-item');
      if (!item) return;
      item.click();
    }

    // Garantimos que não adicionamos múltiplos listeners acidentalmente
    historyContainer.removeEventListener('click', historyClickHandler);
    historyContainer.removeEventListener('keydown', historyKeyHandler);
    historyContainer.addEventListener('click', historyClickHandler);
    historyContainer.addEventListener('keydown', historyKeyHandler);
  }

  // ------------------ Inicialização ------------------
  function init() {
    const cardsRow = Array.from(document.querySelectorAll('.sol-card'));
    // ligar botões de criação de solicitação
    cardsRow.forEach(btn => btn.addEventListener('click', () => openModalFor(btn.dataset.type)));

    attachHistoryDelegation();
    carregarHistorico();
  }

  // DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
</script>



