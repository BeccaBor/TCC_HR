<link rel="stylesheet" href="/css/solicitacoesCola.css">

<div class="page-wrapper">
  {{> navbarCola }}
  <main class="solicitacoes-page">
    <header class="solicitacoes-header">
      <div>
        <h1>Minhas Solicitações</h1>
        <p>Gerencie suas solicitações ao RH de forma rápida e organizada. Clique em um cartão para abrir o formulário.</p>
      </div>
      <div class="sol-header-actions">
        <!-- botão para recarregar manualmente -->
        <button id="refreshHistoryBtn" class="btn btn-sm btn-outline">Atualizar</button>
      </div>
    </header>

    <!-- linha de cards (navbar-like) -->
    <section class="sol-cards-row" role="navigation" aria-label="Tipos de solicitações">
      <button class="sol-card" data-type="ferias" title="Pedido de Férias">
        <div class="sol-card-title">Pedido de Férias</div>
        <div class="sol-card-desc">Solicitar período de férias (siga CLT).</div>
      </button>

      <button class="sol-card" data-type="alteracao_dados" title="Alteração de Dados">
        <div class="sol-card-title">Alteração de Dados</div>
        <div class="sol-card-desc">Atualizar endereço, banco, telefone. Anexe comprovantes quando necessário.</div>
      </button>

      <button class="sol-card" data-type="banco_horas" title="Banco de Horas">
        <div class="sol-card-title">Banco de Horas</div>
        <div class="sol-card-desc">Solicitar extrato / visualização do saldo de horas.</div>
      </button>

      <button class="sol-card" data-type="reajuste_salarial" title="Pedido de Aumento">
        <div class="sol-card-title">Pedido de Aumento</div>
        <div class="sol-card-desc">Solicitação para revisão salarial (anexe justificativas).</div>
      </button>

      <button class="sol-card" data-type="outros" title="Outras Solicitações">
        <div class="sol-card-title">Outros</div>
        <div class="sol-card-desc">Outras solicitações ao departamento pessoal.</div>
      </button>
    </section>

    <!-- conteúdo principal: formulário (modal) será injetado; histórico à direita -->
    <section class="sol-content">
      <div class="sol-forms-area">
        <div class="sol-instructions glass-panel">
          <h3>Como funciona</h3>
          <p>
            Clique em um cartão acima para abrir o formulário. Cada solicitação inclui campos mínimos e, quando pertinente,
            recomenda-se incluir documentos (ex.: atestado, comprovante bancário, justificativa).
          </p>
          <ul>
            <li><strong>Férias (CLT):</strong> preferível avisar com 30 dias úteis de antecedência.</li>
            <li><strong>Atestados:</strong> sempre anexar PDF ou imagem do documento.</li>
            <li><strong>Pedidos de aumento:</strong> anexe histórico de desempenho / justificativas.</li>
          </ul>
        </div>
      </div>

      <!-- HISTÓRICO (maior retângulo) -->
      <aside class="sol-history glass-panel" aria-live="polite">
        <h3>Solicitações Recentes</h3>
        <p class="muted">Acompanhe o status das solicitações enviadas</p>

        <div id="historyContainer" class="history-list">
          <div class="empty-placeholder">Carregando histórico...</div>
        </div>
      </aside>
    </section>
  </main>
</div>

<!-- Template do modal -->
<template id="modalTemplate">
  <div class="modal-overlay" role="dialog" aria-modal="true">
    <div class="modal-panel glass-panel">
      <header class="modal-header">
        <h4 class="modal-title"></h4>
        <button class="modal-close" aria-label="Fechar">&times;</button>
      </header>

      <div class="modal-body">
        <!-- form dinamico será injetado -->
      </div>

      <footer class="modal-footer">
        <div class="modal-msg" aria-live="polite"></div>
        <div class="modal-actions">
          <button class="btn btn-outline cancel-btn">Cancelar</button>
          <button class="btn btn-primary submit-btn" disabled>Enviar Solicitação</button>
        </div>
      </footer>
    </div>
  </div>
</template>

<!-- Script refatorado: substitua o anterior por este -->
<script>
(() => {
  const DEBUG = false; // true para logs e inspeção
  const BACKEND_URL = '{{BACKEND_URL}}' || window.BACKEND_URL || 'http://localhost:3001';
  const API_BASE = (BACKEND_URL.endsWith('/api')) ? BACKEND_URL : (BACKEND_URL + '/api');

  const getToken = () => { try { return localStorage.getItem('token'); } catch (e) { return null; } };
  function buildAuthHeaders(extra = {}) {
    const headers = { ...extra };
    const token = getToken();
    if (token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
  }
  async function safeJsonResponse(res) { try { return await res.json(); } catch (e) { return null; } }
  function safeJsonParse(str) { try { return JSON.parse(str); } catch (e) { return null; } }
  function safeStringify(obj, maxLen = 20000) { try { const s = JSON.stringify(obj); return s.length > maxLen ? s.slice(0, maxLen) + '…' : s; } catch (e) { return '{}'; } }
  function escapeHtml(s) { return String(s || '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#39;'); }
  function formatDateTime(val) { try { if (!val) return '—'; const d = new Date(val); if (isNaN(d)) return String(val); return d.toLocaleString('pt-BR'); } catch (e) { return String(val); } }
  function formatDate(val) { try { if (!val) return '—'; const d = new Date(val); if (isNaN(d)) return String(val); return d.toLocaleDateString('pt-BR'); } catch (e) { return String(val); } }

  function normalizeStatus(s) { if (!s) return 'Pendente'; return String(s).trim(); }
  function statusClassFrom(status) {
    const st = String(status || '').toLowerCase();
    if (st.includes('aprov')) return 'status-badge success';
    if (st.includes('reprov') || st.includes('rejeit') || st.includes('recus')) return 'status-badge danger';
    if (st.includes('pend') || st.includes('analise') || st.includes('andamento')) return 'status-badge warning';
    if (st.includes('conclu')) return 'status-badge success';
    return 'status-badge warning';
  }

  function normalizeAnexosField(anexos) {
    if (!anexos) return [];
    if (typeof anexos === 'string') return [{ url: anexos, name: anexos.split('/').pop() }];
    if (Array.isArray(anexos)) return anexos.map(a => (typeof a === 'string' ? { url: a, name: a.split('/').pop() } : { url: a.url||a.path||a.href||'', name: a.nome||a.name|| (a.url||a.path||'').split('/').pop() })).filter(x => x.url);
    return [{ url: anexos.url||anexos.path||anexos.href||'', name: anexos.nome||anexos.name|| (anexos.url||anexos.path||'').split('/').pop() }].filter(x => x.url);
  }

  function normalizeSolicitacoesResponse(raw) {
    if (!raw) return [];
    if (raw.solicitacoes && Array.isArray(raw.solicitacoes)) return raw.solicitacoes;
    if (raw.data && Array.isArray(raw.data)) return raw.data;
    if (raw.items && Array.isArray(raw.items)) return raw.items;
    if (Array.isArray(raw)) return raw;
    if (raw.solicitacao && typeof raw.solicitacao === 'object' && !Array.isArray(raw.solicitacao)) return [raw.solicitacao];
    if (raw.data && raw.data.solicitacao && typeof raw.data.solicitacao === 'object') return [raw.data.solicitacao];
    if (raw.success && raw.total !== undefined && raw.solicitacoes === undefined && raw.data === undefined) {
      if (raw.rows && Array.isArray(raw.rows)) return raw.rows;
      if (raw.rows && raw.rows.solicitacoes && Array.isArray(raw.rows.solicitacoes)) return raw.rows.solicitacoes;
    }
    if (typeof raw === 'object') return [raw];
    return [];
  }

  function isFileObject(v) {
    if (!v) return false;
    if (typeof File !== 'undefined' && v instanceof File) return true;
    try { return v.constructor && v.constructor.name === 'File'; } catch (e) { return false; }
  }

  const modalTemplate = document.getElementById('modalTemplate');

  const TYPE_LABELS = {
    ferias: 'Pedido de Férias',
    alteracao_dados: 'Alteração de Dados',
    banco_horas: 'Consulta - Banco de Horas',
    consulta_banco_horas: 'Consulta - Banco de Horas',
    reajuste_salarial: 'Pedido de Reajuste Salarial',
    desligamento: 'Desligamento',
    reembolso: 'Reembolso',
    outros: 'Outros'
  };

  const CLIENT_ALLOWED_TIPOS = [
    'ferias','alteracao_dados','consulta_banco_horas','banco_horas',
    'desligamento','reembolso','outros','reajuste_salarial'
  ];

  const formSpecs = {
    ferias: {
      title: 'Pedido de Férias',
      description: 'Informe o período desejado. CLT: recomenda-se 30 dias úteis de antecedência.',
      fields: [
        { name: 'data_inicio', type: 'date', label: 'Data início', required: true },
        { name: 'data_fim', type: 'date', label: 'Data término', required: true },
        { name: 'observacao', type: 'textarea', label: 'Observações (opcional)', required: false },
        { name: 'anexo', type: 'file', label: 'Anexar documento (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    alteracao_dados: {
      title: 'Alteração de Dados Pessoais',
      description: 'Atualize dados como endereço, banco e telefone. Anexe comprovante quando necessário.',
      fields: [
        { name: 'campo', type: 'select', label: 'Campo a alterar', options: ['Endereço','Telefone','Banco','Outro'], required: true },
        { name: 'novo_valor', type: 'text', label: 'Novo valor', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar comprovante (se houver)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    banco_horas: {
      title: 'Solicitação - Banco de Horas',
      description: 'Peça o extrato ou visualização do saldo de horas acumuladas.',
      fields: [
        { name: 'periodo_inicio', type: 'date', label: 'Período - início (opcional)', required: false },
        { name: 'periodo_fim', type: 'date', label: 'Período - fim (opcional)', required: false },
        { name: 'observacao', type: 'textarea', label: 'Observações (opcional)', required: false }
      ]
    },
    reajuste_salarial: {
      title: 'Pedido de Reajuste Salarial',
      description: 'Solicitação para revisão salarial — anexe justificativas e histórico de desempenho quando houver.',
      fields: [
        { name: 'salario_solicitado', type: 'number', label: 'Salário desejado (R$)', required: true },
        { name: 'justificativa', type: 'textarea', label: 'Justificativa', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar documentos (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    },
    outros: {
      title: 'Outra Solicitação',
      description: 'Descreva sua solicitação ao departamento pessoal.',
      fields: [
        { name: 'titulo', type: 'text', label: 'Título da solicitação', required: true },
        { name: 'descricao', type: 'textarea', label: 'Descrição', required: true },
        { name: 'anexo', type: 'file', label: 'Anexar (opcional)', accept: '.pdf,.jpg,.jpeg,.png' }
      ]
    }
  };

  // monta uma descrição clara a partir dos campos do FormData e do tipo
  function buildDescricaoFromFormData(fd, tipo) {
    tipo = (tipo || '').toString().toLowerCase();
    // prefer explicit fields first
    const explicit = (fd.get('descricao') || fd.get('observacao') || fd.get('justificativa') || '').toString().trim();
    if (explicit) return explicit;

    // construir por tipo
    if (tipo === 'ferias') {
      const di = fd.get('data_inicio') || '—';
      const df = fd.get('data_fim') || '—';
      const obs = (fd.get('observacao') || '').toString().trim();
      return `Período solicitado: ${di} a ${df}${obs ? ' — Observação: ' + obs : ''}`;
    }
    if (tipo === 'alteracao_dados') {
      const campo = fd.get('campo') || 'Campo não especificado';
      const novo = fd.get('novo_valor') || '';
      return `Alteração solicitada: ${campo} → ${novo}`.trim();
    }
    if (tipo === 'consulta_banco_horas' || tipo === 'banco_horas') {
      const pi = fd.get('periodo_inicio') || '';
      const pf = fd.get('periodo_fim') || '';
      const obs = fd.get('observacao') || '';
      let s = 'Solicitação de extrato de banco de horas';
      if (pi || pf) s += ` (${pi || 'início não informado'} → ${pf || 'fim não informado'})`;
      if (obs) s += ` — Observação: ${obs}`;
      return s;
    }
    if (tipo === 'reajuste_salarial') {
      const sal = fd.get('salario_solicitado') || '';
      const just = fd.get('justificativa') || '';
      return `Salário solicitado: R$ ${sal || '—'}. Justificativa: ${just || '—'}`.trim();
    }
    // fallback - tentar juntar campos úteis
    const titleCandidate = fd.get('titulo') || '';
    if (titleCandidate) return titleCandidate.toString();
    return null;
  }

  // monta um título sensato caso não exista
  function buildTituloFromFormData(fd, tipo) {
    tipo = (tipo || '').toString().toLowerCase();
    if (fd.get('titulo')) return fd.get('titulo').toString();
    if (tipo === 'ferias') {
      const di = fd.get('data_inicio') || '';
      const df = fd.get('data_fim') || '';
      return `Férias ${di || ''}${(di && df)? ' → ' : ''}${df || ''}`.trim();
    }
    if (tipo === 'alteracao_dados') {
      const campo = fd.get('campo') || '';
      return `Alteração: ${campo}`.trim();
    }
    if (tipo === 'reajuste_salarial') {
      const sal = fd.get('salario_solicitado') || '';
      return `Reajuste salarial ${sal ? '– R$ ' + Number(sal).toFixed(2) : ''}`.trim();
    }
    if (tipo === 'consulta_banco_horas' || tipo === 'banco_horas') {
      return 'Consulta - Banco de Horas';
    }
    return null;
  }

  // cria modal de envio
  function openModalFor(typeKey) {
    const spec = formSpecs[typeKey];
    if (!spec || !modalTemplate) { console.warn('Spec/modal inexistente', typeKey); return; }

    const node = modalTemplate.content.cloneNode(true);
    const overlay = node.querySelector('.modal-overlay');
    const titleEl = node.querySelector('.modal-title');
    const body = node.querySelector('.modal-body');
    const closeBtn = node.querySelector('.modal-close');
    const cancelBtn = node.querySelector('.cancel-btn');
    const submitBtn = node.querySelector('.submit-btn');
    const msgEl = node.querySelector('.modal-msg');

    titleEl.textContent = spec.title;

    const form = document.createElement('form');
    form.className = 'sol-form';
    form.enctype = 'multipart/form-data';
    form.autocomplete = 'off';
    form.innerHTML = `<p class="muted">${spec.description}</p>`;

    spec.fields.forEach(f => {
      const div = document.createElement('div'); div.className = 'form-field';
      const label = document.createElement('label'); label.textContent = f.label || f.name; label.htmlFor = 'field_' + f.name;
      div.appendChild(label);

      let input;
      if (f.type === 'textarea') { input = document.createElement('textarea'); input.rows = 4; }
      else if (f.type === 'select') {
        input = document.createElement('select');
        const placeholderOption = document.createElement('option'); placeholderOption.value = ''; placeholderOption.textContent = 'Selecione...'; placeholderOption.disabled = true; placeholderOption.selected = true;
        input.appendChild(placeholderOption);
        (f.options || []).forEach(opt => { const o = document.createElement('option'); o.value = opt; o.textContent = opt; input.appendChild(o); });
      } else {
        input = document.createElement('input'); input.type = f.type || 'text';
        if (f.type === 'file' && f.accept) input.accept = f.accept;
        if (f.type === 'number') input.step = '0.01';
      }
      input.id = 'field_' + f.name; input.name = f.name;
      if (f.required) input.required = true;
      div.appendChild(input);
      form.appendChild(div);
    });

    // hidden tipo_solicitacao (sempre enviar)
    const hiddenType = document.createElement('input');
    hiddenType.type = 'hidden'; hiddenType.name = 'tipo_solicitacao'; hiddenType.value = typeKey;
    form.appendChild(hiddenType);

    body.appendChild(form);
    document.body.appendChild(overlay);

    const firstInput = form.querySelector('input,textarea,select'); if (firstInput) firstInput.focus();
    function updateSubmitState() { submitBtn.disabled = !form.checkValidity(); }
    form.querySelectorAll('input,textarea,select').forEach(inp => { inp.addEventListener('input', updateSubmitState); inp.addEventListener('change', updateSubmitState); });
    updateSubmitState();

    async function onSubmit(e) {
      e.preventDefault();
      submitBtn.disabled = true; msgEl.style.color = ''; msgEl.textContent = 'Enviando...';

      try {
        // coleta arquivos do DOM
        const files = [];
        form.querySelectorAll('input[type="file"]').forEach(inp => {
          if (!inp.files) return;
          for (let i = 0; i < inp.files.length; i++) files.push(inp.files[i]);
        });
        const maxMB = (window.MAX_UPLOAD_MB || 15);

        for (const f of files) {
          if (f.size && f.size > maxMB * 1024 * 1024) {
            msgEl.textContent = `Arquivo muito grande. Máx ${maxMB} MB por arquivo.`;
            submitBtn.disabled = false;
            return;
          }
        }

        // pega todos os campos originais
        const originalFD = new FormData(form);

        // normaliza tipo e tratar alias
        const rawTipo = (originalFD.get('tipo_solicitacao') || '').toString().trim();
        let tipoNormalized = rawTipo.toLowerCase();
        if (tipoNormalized === 'banco_horas') tipoNormalized = 'consulta_banco_horas';

        if (!CLIENT_ALLOWED_TIPOS.includes(tipoNormalized)) {
          msgEl.textContent = 'Tipo de solicitação inválido (cliente). Atualize a página e tente novamente.';
          submitBtn.disabled = false;
          console.warn('Tipo inválido no front antes de enviar:', rawTipo);
          return;
        }

        // construir controlled FormData (copiar campos não-file)
        const controlled = new FormData();
        for (const [k, v] of originalFD.entries()) {
          if (isFileObject(v)) continue;
          controlled.append(k, v);
        }

        // anexar arquivos (campo 'anexos' e primeiro como 'anexo' - backend aceita ambos)
        files.forEach((f, idx) => {
          controlled.append('anexos', f);
          if (idx === 0) controlled.append('anexo', f);
        });

        // garantir tipo normalized
        if (!controlled.get('tipo_solicitacao')) controlled.set('tipo_solicitacao', tipoNormalized);
        else controlled.set('tipo_solicitacao', tipoNormalized);

        // garantir descricao (prioridade: descricao > observacao > justificativa > built)
        const descricao = buildDescricaoFromFormData(controlled, tipoNormalized);
        if (descricao) controlled.set('descricao', descricao);

        // garantir titulo caso não exista
        if (!controlled.get('titulo')) {
          const tituloGerado = buildTituloFromFormData(controlled, tipoNormalized);
          if (tituloGerado) controlled.set('titulo', tituloGerado);
        }

        if (DEBUG) {
          console.log('DEBUG - controlled FormData to be sent:');
          for (const e of controlled.entries()) {
            if (isFileObject(e[1])) console.log(e[0], e[1].name || '[File]');
            else console.log(e[0], e[1]);
          }
        }

        await sendFormData(controlled);
      } catch (err) {
        console.error('Erro envio:', err);
        msgEl.textContent = 'Erro ao preparar o envio. Tente novamente.';
        submitBtn.disabled = false;
      }
    }

    async function sendFormData(formData) {
      try {
        const res = await fetch(`${API_BASE}/solicitacoes`, {
          method: 'POST',
          headers: buildAuthHeaders({}), // NÃO setar Content-Type (fetch cuidará)
          body: formData,
          credentials: 'include'
        });

        const data = await safeJsonResponse(res);
        if (!res.ok) {
          const errMsg = (data && (data.erro || data.message)) || `Erro ${res.status}`;
          msgEl.textContent = `Erro ao enviar a solicitação: ${errMsg}`;
          submitBtn.disabled = false;
          return;
        }

        msgEl.style.color = '#bfe6ca';
        msgEl.textContent = 'Solicitação enviada com sucesso!';
        await carregarHistorico();
        setTimeout(cleanup, 900);
      } catch (err) {
        console.error('Erro envio:', err);
        msgEl.textContent = 'Erro ao enviar a solicitação. Tente novamente.';
        submitBtn.disabled = false;
      }
    }

    form.addEventListener('submit', onSubmit);
    const onClickSubmit = (ev) => { ev.preventDefault(); if (!form.checkValidity()) { form.reportValidity?.(); return; } form.requestSubmit(); };
    submitBtn.addEventListener('click', onClickSubmit);

    function cleanup() {
      form.removeEventListener('submit', onSubmit);
      submitBtn.removeEventListener('click', onClickSubmit);
      cancelBtn.removeEventListener('click', onCancel);
      closeBtn.removeEventListener('click', onCancel);
      document.removeEventListener('keydown', onKey);
      overlay.remove();
    }
    function onCancel(e) { e?.preventDefault(); cleanup(); }
    closeBtn.addEventListener('click', onCancel);
    cancelBtn.addEventListener('click', onCancel);

    const onKey = (ev) => { if (ev.key === 'Escape') cleanup(); };
    document.addEventListener('keydown', onKey);
    overlay.addEventListener('click', (ev) => { if (ev.target === overlay) cleanup(); });
  }

  // abrir modal de detalhes (mantive igual)
  async function openViewModal(solicitacaoOrId) {
    if (typeof solicitacaoOrId === 'string' || typeof solicitacaoOrId === 'number') {
      const id = solicitacaoOrId;
      try {
        const res = await fetch(`${API_BASE}/solicitacoes/${encodeURIComponent(id)}`, {
          headers: buildAuthHeaders({ 'Accept': 'application/json' }),
          credentials: 'include'
        });
        const data = await safeJsonResponse(res) || {};
        const detal = data.solicitacao || data.data || data || {};
        return openViewModal(detal);
      } catch (err) { console.warn('Erro ao buscar detalhe por id:', err); return; }
    }

    const solicitacao = solicitacaoOrId;
    if (!solicitacao) return;

    document.querySelectorAll('.modal-overlay').forEach(el => el.remove());

    const tipoKey = (solicitacao.tipo || solicitacao.tipo_solicitacao || solicitacao.tipoKey || 'outros').toString().toLowerCase();
    const tipoLabel = TYPE_LABELS[tipoKey] || (solicitacao.titulo || 'Solicitação');
    const status = normalizeStatus(solicitacao.status || solicitacao.estado || solicitacao.situacao);
    const dataSolic = solicitacao.created_at || solicitacao.data_solicitacao || solicitacao.data_criacao || solicitacao.createdAt;
    const dataFormatada = formatDateTime(dataSolic);

    const anexos = normalizeAnexosField(solicitacao.anexos || solicitacao.anexo || solicitacao.anexo_path || solicitacao.files || solicitacao.attachment || []);
    let anexosHtml = '<p><strong>Anexos:</strong> Nenhum arquivo enviado</p>';
    if (anexos.length) {
      anexosHtml = '<p><strong>Anexos:</strong></p><ul class="anexo-lista">';
      anexos.forEach(a => {
        const safeUrl = escapeHtml(a.url);
        const safeName = escapeHtml(a.name || a.nome || (a.url||'').split('/').pop());
        anexosHtml += `<li><a href="${safeUrl}" target="_blank" rel="noopener noreferrer" class="btn btn-outline" download>📎 ${safeName}</a></li>`;
      });
      anexosHtml += '</ul>';
    }

    const partes = [];
    partes.push(`<p><strong>Tipo:</strong> ${escapeHtml(tipoLabel)}</p>`);
    partes.push(`<p><strong>Status:</strong> ${escapeHtml(status)}</p>`);
    partes.push(`<p><strong>Data da Solicitação:</strong> ${escapeHtml(dataFormatada)}</p>`);

    const resumoCampos = [
      { key: 'titulo', label: 'Título' },
      { key: 'descricao', label: 'Descrição' },
      { key: 'observacao', label: 'Observações' },
      { key: 'justificativa', label: 'Justificativa' },
      { key: 'novo_valor', label: 'Novo Valor' },
      { key: 'salario_solicitado', label: 'Salário Solicitado' },
      { key: 'periodo_inicio', label: 'Período Início' },
      { key: 'periodo_fim', label: 'Período Fim' },
      { key: 'data_inicio', label: 'Data Início' },
      { key: 'data_fim', label: 'Data Fim' }
    ];

    resumoCampos.forEach(f => {
      if (solicitacao[f.key] !== undefined && solicitacao[f.key] !== null && String(solicitacao[f.key]).trim() !== '') {
        if (f.key === 'salario_solicitado') {
          const num = Number(solicitacao[f.key]);
          if (!isNaN(num)) partes.push(`<p><strong>${f.label}:</strong> R$ ${num.toFixed(2)}</p>`);
        } else if (f.key === 'periodo_inicio' || f.key === 'periodo_fim' || f.key === 'data_inicio' || f.key === 'data_fim') {
          partes.push(`<p><strong>${f.label}:</strong> ${escapeHtml(formatDate(solicitacao[f.key]))}</p>`);
        } else {
          partes.push(`<p><strong>${f.label}:</strong> ${escapeHtml(String(solicitacao[f.key]))}</p>`);
        }
      }
    });

    partes.push(anexosHtml);

    const corpoDetalhes = `
      <div class="solicitacao-detalhes">
        ${partes.join('')}
      </div>
    `;

    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';
    overlay.innerHTML = `
      <div class="modal-panel glass-panel" role="dialog" aria-modal="true" aria-label="Detalhes da solicitação">
        <header class="modal-header">
          <h4 class="modal-title">Detalhes da Solicitação</h4>
          <button class="modal-close" aria-label="Fechar">&times;</button>
        </header>
        <div class="modal-body">${corpoDetalhes}</div>
        <footer class="modal-footer">
          <button class="btn btn-primary fechar-btn">Fechar</button>
        </footer>
      </div>
    `;
    document.body.appendChild(overlay);

    const closeBtn = overlay.querySelector('.modal-close');
    const fecharBtn = overlay.querySelector('.fechar-btn');
    const closeModal = () => overlay.remove();
    [closeBtn, fecharBtn].forEach(btn => btn && btn.addEventListener('click', closeModal, { once: true }));
    overlay.addEventListener('click', e => { if (e.target === overlay) closeModal(); });
    document.addEventListener('keydown', function onKey(e) { if (e.key === 'Escape') { closeModal(); document.removeEventListener('keydown', onKey); } });

    const modalPanel = overlay.querySelector('.modal-panel');
    if (modalPanel && modalPanel.animate) modalPanel.animate([{ transform: 'scale(0.95)', opacity: 0 }, { transform: 'scale(1)', opacity: 1 }], { duration: 180, easing: 'ease-out' });
  }

  async function carregarHistorico() {
    const lista = document.getElementById('historyContainer');
    if (!lista) return;
    lista.innerHTML = `<div class="loading">⏳ Carregando histórico...</div>`;

    const endpoints = [
      `${API_BASE}/solicitacoes/me`,
      `${API_BASE}/solicitacoes/minhas`,
      `${API_BASE}/solicitacoes/usuario`,
      `${API_BASE}/solicitacoes`
    ];

    let normalized = [];
    for (const url of endpoints) {
      try {
        const res = await fetch(url, { headers: buildAuthHeaders({ 'Accept': 'application/json' }), credentials: 'include' });
        if (!res.ok) {
          if (DEBUG) console.warn('carregarHistorico: endpoint não ok', url, res.status);
          continue;
        }
        const raw = await safeJsonResponse(res);
        if (!raw) continue;
        const arr = normalizeSolicitacoesResponse(raw);
        if (Array.isArray(arr) && arr.length) { normalized = arr; break; }
      } catch (err) {
        if (DEBUG) console.warn('Erro tentando endpoint', url, err);
        continue;
      }
    }

    if (!Array.isArray(normalized) || normalized.length === 0) {
      lista.innerHTML = `<p class="muted">Nenhuma solicitação encontrada.</p>`;
      return;
    }

    const withDates = normalized.map(item => {
      const dataCriacao = item.created_at || item.data_solicitacao || item.data_criacao || item.createdAt || null;
      const parsed = dataCriacao ? new Date(dataCriacao) : new Date(0);
      return { item, date: isNaN(parsed) ? new Date(0) : parsed };
    });

    withDates.sort((a, b) => b.date - a.date);
    const top3 = withDates.slice(0, 3).map(x => x.item);

    lista.innerHTML = '';
    top3.forEach(solicitacao => {
      const rawTipo = solicitacao.tipo || solicitacao.tipo_solicitacao || solicitacao.tipoKey || solicitacao.tipo_label || '';
      const tipoKey = normalizeTipoKey(rawTipo);
      const titulo = solicitacao.titulo || TYPE_LABELS?.[tipoKey] || (solicitacao.tipo_label || 'Solicitação');
      const status = normalizeStatus(solicitacao.status || solicitacao.estado || solicitacao.situacao);
      const statusClass = statusClassFrom(status);
      const dataCriacao = solicitacao.created_at || solicitacao.data_solicitacao || solicitacao.data_criacao || solicitacao.createdAt;
      const dataFormatada = formatDateTime(dataCriacao);
      const id = solicitacao.id || solicitacao._id || solicitacao.solicitacao_id || solicitacao.id_solicitacao || (solicitacao && solicitacao.usuario_id && solicitacao.usuario_id + '-' + (solicitacao.created_at||'') ) || null;

      const resumo = (
        solicitacao.resumo ||
        solicitacao.descricao ||
        solicitacao.justificativa ||
        solicitacao.observacao ||
        solicitacao.novo_valor ||
        (solicitacao.salario_solicitado ? `Salário: R$ ${Number(solicitacao.salario_solicitado).toFixed(2)}` : '') ||
        solicitacao.titulo ||
        ''
      );

      const card = document.createElement('div');
      card.className = 'history-item glass-item';
      card.tabIndex = 0;
      if (id) card.setAttribute('data-solicitacao-id', id);

      const small = { id, titulo, tipo: tipoKey, status, dataCriacao, resumo };
      card.setAttribute('data-solicitacao', safeStringify(small, 2000));

      card.innerHTML = `
        <div class="solicitacao-header">
          <span class="tipo-solicitacao">${escapeHtml(titulo)}</span>
          <span class="${statusClass}">${escapeHtml(status)}</span>
        </div>
        <div class="solicitacao-body">
          <small>${escapeHtml(dataFormatada)}</small>
          ${resumo ? `<div class="resumo">${escapeHtml(resumo)}</div>` : ''}
        </div>
        <div class="solicitacao-actions">
          <button class="btn btn-sm btn-outline view-btn" aria-label="Ver detalhes">🔍 Ver detalhes</button>
        </div>
      `;
      lista.appendChild(card);
    });
  }

  function normalizeTipoKey(raw) {
    if (!raw && raw !== 0) return 'outros';
    const s = String(raw).toLowerCase().trim();
    if (!s) return 'outros';
    if (/feri/i.test(s)) return 'ferias';
    if (/alterac|alteração|alteracao|update|atualiza/i.test(s)) return 'alteracao_dados';
    if (/banco.*hora|banco_horas|consulta.*hora|saldo.*hora|consulta_banco_horas/i.test(s)) return 'banco_horas';
    if (/reajust|aument|salari|salário|salario/i.test(s)) return 'reajuste_salarial';
    if (/deslig|rescis/i.test(s)) return 'desligamento';
    if (/reembols|reembolso/i.test(s)) return 'reembolso';
    if (/outro|other/i.test(s)) return 'outros';
    const map = {
      'reajuste-salarial': 'reajuste_salarial',
      'consulta_banco_horas': 'banco_horas',
      'consulta-banco-horas': 'banco_horas',
      'alteracao_dados': 'alteracao_dados',
      'alteracao-dados': 'alteracao_dados'
    };
    if (map[s]) return map[s];
    if (s.includes('salari') || s.includes('aumento') || s.includes('reajust')) return 'reajuste_salarial';
    if (s.includes('aumento') || s.includes('pedido de aumento')) return 'reajuste_salarial';
    return 'outros';
  }

  function attachHistoryDelegation() {
    const historyContainer = document.getElementById('historyContainer');
    if (!historyContainer) return;

    async function historyClickHandler(ev) {
      const item = ev.target.closest('.history-item');
      if (!item) return;
      const id = item.getAttribute('data-solicitacao-id');
      if (id) {
        try {
          const res = await fetch(`${API_BASE}/solicitacoes/${encodeURIComponent(id)}`, { headers: buildAuthHeaders({ 'Accept': 'application/json' }), credentials: 'include' });
          const data = await safeJsonResponse(res);
          if (res.ok && data) {
            const detal = data.solicitacao || data.data || data || {};
            return openViewModal(detal);
          }
        } catch (err) { if (DEBUG) console.warn('Erro ao buscar detalhe por id:', err); }
      }
      const raw = item.getAttribute('data-solicitacao');
      const small = safeJsonParse(raw) || {};
      openViewModal(small);
    }

    function historyKeyHandler(ev) {
      if (ev.key !== 'Enter') return;
      const item = ev.target.closest('.history-item');
      if (!item) return;
      item.click();
    }

    historyContainer.removeEventListener('click', historyClickHandler);
    historyContainer.removeEventListener('keydown', historyKeyHandler);
    historyContainer.addEventListener('click', historyClickHandler);
    historyContainer.addEventListener('keydown', historyKeyHandler);
  }

  function init() {
    const cardsRow = Array.from(document.querySelectorAll('.sol-card'));
    cardsRow.forEach(btn => btn.addEventListener('click', () => openModalFor(btn.dataset.type)));

    const refreshBtn = document.getElementById('refreshHistoryBtn');
    if (refreshBtn) refreshBtn.addEventListener('click', () => carregarHistorico());

    attachHistoryDelegation();
    carregarHistorico();
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init); else init();

})();
</script>
