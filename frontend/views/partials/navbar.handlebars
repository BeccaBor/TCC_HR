<link rel="stylesheet" href="/css/navbar.css">

<!-- Aplicação IMEDIATA do background salvo -->
<script>
/* Reaplica fundo salvo imediatamente para evitar flash entre páginas */
(function(){
  try {
    const BG_KEY = 'gestorWallpaper';
    const saved = localStorage.getItem(BG_KEY);
    if (saved) {
      const final = saved.includes('url(') ? saved : `url("${saved}")`;
      document.documentElement.style.setProperty('--bg-image', final);
    }
  } catch(e) { /* silent */ }
})();
</script>

<nav class="navbar-gestor d-flex justify-content-between align-items-center" role="navigation" aria-label="Navbar Gestor">
  <!-- Brand -->
  <div class="brand-left d-flex align-items-center">
    <a href="/" class="d-flex align-items-center" aria-label="Ir para home">
      <img src="/img/Conecthar.png" alt="Conecthar" height="70" width="200">
    </a>
  </div>

  <!-- Links centrais -->
  <div class="d-flex gap-4 nav-links" role="menubar" aria-label="Links principais">
    <a href="/gestor/documentacao" class="btnNav btn" role="menuitem">Documentação</a>
    <a href="/gestor/folhadepagamento" class="btnNav btn" role="menuitem">Folha de pagamento</a>
    <a href="/gestor/beneficios" class="btnNav btn" role="menuitem">Gerenciar Benefícios</a>
    <a href="/gestor/solicitacoes" class="btnNav btn" role="menuitem">Solicitações</a>
    <a href="/gestor/gerenciamento" class="btnNav btn" role="menuitem">Gerenciamento</a>
    <a href="/gestor/gerenciarPonto" class="btnNav btn" role="menuitem">Gerenciar ponto</a>
  </div>

  <!-- Ações (direita) -->
  <div class="d-flex align-items-center gap-3 nav-actions">
    <!-- Botão de perfil: abre popover -->
    <button id="profileToggle"
            class="btn-profile"
            type="button"
            aria-haspopup="true"
            aria-expanded="false"
            aria-controls="profile-popover"
            aria-label="Abrir opções de perfil"
            title="Perfil"
            data-username="{{usuario.nome}}"
            data-initialized="0">
      {{#if usuario.foto}}
        <img src="/uploads/{{usuario.foto}}" alt="Avatar de {{usuario.nome}}" class="avatar-sm">
      {{else}}
        <div class="avatar-initials" aria-hidden="true">U</div>
      {{/if}}
    </button>

    <!-- Menu extra (agora com funcionalidade de wallpaper) -->
    <button id="btnMenu" class="btn btn-link p-0" type="button" aria-label="Mais opções" title="Mais opções">
      <i class="bi bi-three-dots-vertical" aria-hidden="true"></i>
    </button>
  </div>
</nav>

<div class="linha" aria-hidden="true"></div>

<!-- Modal de confirmação de logout -->
<div class="modal fade" id="confirmLogoutModal" tabindex="-1" aria-labelledby="confirmLogoutTitle" aria-hidden="true">
  <div class="modal-dialog modal-sm modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title" id="confirmLogoutTitle">Confirmar saída</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
      </div>
      <div class="modal-body text-center">
        <p>Tem certeza que deseja sair da sua conta?</p>
        <div class="d-flex gap-2 justify-content-between mt-3">
          <button class="btn btn-secondary flex-fill" data-bs-dismiss="modal">Cancelar</button>
          <button class="btn btn-danger flex-fill" id="confirmLogoutBtn">Sair</button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- BG Picker Overlay (igual ao navbarCola) -->
<div id="bgPickerOverlay" class="bgpicker-overlay" aria-hidden="true" role="dialog" aria-modal="true" tabindex="-1">
  <div class="bgpicker-panel" role="document" aria-label="Escolher fundo da página">
    <header class="bgpicker-header">
      <h3>Escolher imagem de fundo</h3>
      <button id="bgPickerClose" class="btn-close" aria-label="Fechar seletor de fundo"></button>
    </header>

    <div class="bgpicker-body">
      <p class="muted small">Clique em uma imagem para aplicar. Sua escolha será lembrada no navegador.</p>
      <div class="bg-grid" id="bgGrid" role="list"></div>
    </div>

    <footer class="bgpicker-footer">
      <button id="bgResetBtn" class="btn btn-sm btn-outline-secondary">Restaurar padrão</button>
      <button id="bgApplyBtn" class="btn btn-sm btn-primary">Fechar</button>
    </footer>
  </div>
</div>

<script>
/* Navbar Gestor com funcionalidade de troca de wallpaper - Adaptado do navbarCola */
(function () {
  document.addEventListener('DOMContentLoaded', () => {
    const BACKEND_URL = (typeof window !== 'undefined' && window.BACKEND_URL) ? window.BACKEND_URL : 'http://localhost:3001';
    const profileToggle = document.getElementById('profileToggle');
    const confirmLogoutModalEl = document.getElementById('confirmLogoutModal');
    const btnMenu = document.getElementById('btnMenu');

    if (!profileToggle) return;
    if (profileToggle.dataset.initialized === '1') return;
    profileToggle.dataset.initialized = '1';

    // Inicia iniciais
    try {
      const initialsEl = profileToggle.querySelector('.avatar-initials');
      if (initialsEl) {
        const username = profileToggle.getAttribute('data-username') || '';
        initialsEl.textContent = username.trim().charAt(0).toUpperCase() || 'U';
      }
    } catch(e){}

    /* ---------- WALLPAPER FUNCTIONALITY (IGUAL AO NAVBARCOLA) ---------- */
    const BG_KEY = 'gestorWallpaper';
    const DEFAULT_BG = "url('/img/glassmorphism5.jpg')";
    const BACKGROUNDS = [
      '/img/ramon1.jpeg',
      '/img/ramon7.jpeg',
      '/img/ff2.jpg',
      '/img/ff3.jpg',
      '/img/glassmorphism2.jpg',
      '/img/glassmorphism3.jpg'
    ];

    function applyBackground(url) {
      const root = document.documentElement;
      const final = url && !url.includes('url(') ? `url('${url}')` : (url || DEFAULT_BG);
      root.style.setProperty('--bg-image', final);
      localStorage.setItem(BG_KEY, url || '');
    }

    function restoreSavedBackground() {
      const saved = localStorage.getItem(BG_KEY);
      if (saved) applyBackground(saved);
    }

    function mountBgGrid() {
      const grid = document.getElementById('bgGrid');
      if (!grid) return;
      grid.innerHTML = '';
      const saved = localStorage.getItem(BG_KEY) || '';

      BACKGROUNDS.forEach((src) => {
        const div = document.createElement('div');
        div.className = 'bg-thumb';
        div.setAttribute('role','listitem');
        div.tabIndex = 0;
        div.dataset.src = src;

        const img = document.createElement('img');
        img.src = src;
        img.alt = 'Fundo ' + src.split('/').pop();
        img.style.cssText = 'width: 100%; height: 92px; object-fit: cover; display:block;';

        const check = document.createElement('div');
        check.className = 'thumb-check';
        check.textContent = (saved === src) ? 'Selecionado' : 'Selecionar';

        if (saved === src) div.classList.add('selected');

        div.appendChild(img);
        div.appendChild(check);

        div.addEventListener('click', () => {
          document.querySelectorAll('.bg-thumb.selected').forEach(n => n.classList.remove('selected'));
          div.classList.add('selected');
          check.textContent = 'Selecionado';
          applyBackground(src);
        });

        div.addEventListener('keydown', (ev) => { 
          if (ev.key === 'Enter' || ev.key === ' ') { 
            ev.preventDefault(); 
            div.click(); 
          } 
        });

        grid.appendChild(div);
      });
    }

    function openBgPicker() {
      mountBgGrid();
      const ov = document.getElementById('bgPickerOverlay');
      if (!ov) return;
      ov.setAttribute('aria-hidden','false');
      ov.style.display = 'flex';
      setTimeout(() => { const f = ov.querySelector('.bg-thumb'); if (f) f.focus(); }, 80);
    }

    function closeBgPicker() {
      const ov = document.getElementById('bgPickerOverlay');
      if (!ov) return;
      ov.setAttribute('aria-hidden','true');
      ov.style.display = 'none';
    }

    // Init picker restore & button wiring
    restoreSavedBackground();

    // Botão menu abre o picker
    if (btnMenu) {
      btnMenu.addEventListener('click', openBgPicker);
    }

    document.getElementById('bgPickerClose')?.addEventListener('click', closeBgPicker);
    document.getElementById('bgApplyBtn')?.addEventListener('click', closeBgPicker);
    document.getElementById('bgResetBtn')?.addEventListener('click', () => {
      localStorage.removeItem(BG_KEY);
      document.documentElement.style.setProperty('--bg-image', DEFAULT_BG);
      document.querySelectorAll('.bg-thumb.selected').forEach(n => n.classList.remove('selected'));
      document.querySelectorAll('.bg-thumb .thumb-check').forEach(el => el.textContent = 'Selecionar');
    });

    // ESC to close overlay
    document.addEventListener('keydown', (ev) => {
      if ((ev.key === 'Escape') && document.getElementById('bgPickerOverlay')?.getAttribute('aria-hidden') === 'false') {
        closeBgPicker();
      }
    });

    /* ---------- PROFILE POPOVER FUNCTIONALITY (COM BOTÃO DE FUNDO) ---------- */
    let popoverInstance = null;
    let outsideClickHandler = null;
    let escHandler = null;

    function escapeHtml(str=''){ 
      return String(str).replace(/[&<>"'`=\/]/g, s => {
        return ({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;','/':'&#x2F;','`':'&#96;','=':'&#61;' }[s]);
      });
    }

    function buildPopoverHtml(user = {}) {
      const nome = user.nome ? escapeHtml(user.nome) : 'Usuário';
      const tipo = user.tipo_usuario ? escapeHtml(user.tipo_usuario) : '';
      const foto = user.foto ? escapeHtml(user.foto) : null;
      
      return `
        <div id="profile-popover" class="popover-profile" style="min-width:240px;">
          <div class="d-flex" style="gap:.6rem;padding:10px 12px;align-items:center;">
            <div style="width:44px;height:44px;border-radius:8px;overflow:hidden;flex:0 0 44px;display:grid;place-items:center;background:rgba(255,255,255,0.02);font-weight:700;color:inherit;">
              ${foto ? `<img src="/uploads/${foto}" style="width:100%;height:100%;object-fit:cover;" alt="Avatar">` : escapeHtml(nome.charAt(0))}
            </div>
            <div style="flex:1;">
              <div style="font-weight:700;font-size:.95rem;">${nome}</div>
              <div style="font-size:.78rem;color:rgba(0,0,0,0.55)">${tipo}</div>
            </div>
          </div>

          <div style="padding:8px 10px;display:flex;flex-direction:column;gap:8px;">
            <button id="popoverViewProfile" class="btn btn-sm btn-outline-secondary btn-popover-action" type="button" style="text-align:left;">Ver perfil</button>
            <button id="popoverBgBtn" class="btn btn-sm btn-outline-primary btn-popover-action" type="button" style="text-align:left;">Alterar fundo</button>
            <button id="popoverLogoutBtn" class="btn btn-sm btn-danger btn-popover-action" type="button">Sair</button>
          </div>
        </div>
      `;
    }

    function hidePopover() {
      if (!popoverInstance) return;
      try { popoverInstance.hide(); } catch (e) {}
      try { popoverInstance.dispose(); } catch (e) {}
      if (popoverInstance._fallbackEl) {
        try { popoverInstance._fallbackEl.remove(); } catch (e) {}
      }
      popoverInstance = null;
      profileToggle.setAttribute('aria-expanded', 'false');

      if (outsideClickHandler) { 
        document.removeEventListener('click', outsideClickHandler); 
        outsideClickHandler = null; 
      }
      if (escHandler) { 
        document.removeEventListener('keydown', escHandler); 
        escHandler = null; 
      }
    }

    async function toggleProfilePopover(e) {
      if (e && e.isTrusted === false) return;
      if (popoverInstance) { hidePopover(); return; }

      const token = localStorage.getItem('token');
      if (!token) { window.location.href = '/'; return; }

      let usuario = {};
      try {
        const res = await fetch(`${BACKEND_URL}/api/auth/me`, { 
          headers: { Authorization: `Bearer ${token}` } 
        });
        if (res.ok) {
          const data = await res.json();
          usuario = data.usuario || {};
        }
      } catch(e) {
        console.warn('Erro ao buscar usuário:', e);
      }

      const useBootstrap = window.bootstrap?.Popover;
      if (useBootstrap) {
        popoverInstance = new bootstrap.Popover(profileToggle, {
          content: buildPopoverHtml(usuario),
          html: true, 
          sanitize: false, 
          trigger: 'manual',
          placement: 'bottom', 
          container: 'body'
        });
        popoverInstance.show();
      } else {
        const div = document.createElement('div');
        div.className = 'popover fallback-popover';
        div.setAttribute('role', 'dialog');
        div.innerHTML = buildPopoverHtml(usuario);
        document.body.appendChild(div);
        const rect = profileToggle.getBoundingClientRect();
        div.style.position = 'absolute';
        const left = Math.min(window.innerWidth - 260, Math.max(8, rect.left + window.scrollX));
        div.style.left = left + 'px';
        div.style.top = (rect.bottom + 8 + window.scrollY) + 'px';
        popoverInstance = { 
          _fallbackEl: div, 
          hide() { try { div.remove(); } catch(e){} }, 
          dispose() { try { div.remove(); } catch(e){} } 
        };
      }

      profileToggle.setAttribute('aria-expanded', 'true');

      requestAnimationFrame(() => {
        const pop = document.querySelector('.popover') || document.querySelector('.fallback-popover');
        if (!pop) return;
        
        const viewBtn = pop.querySelector('#popoverViewProfile');
        const bgBtn = pop.querySelector('#popoverBgBtn');
        const logoutBtn = pop.querySelector('#popoverLogoutBtn');

        viewBtn?.addEventListener('click', () => { 
          hidePopover(); 
          window.location.href = '/gestor/perfil'; 
        });

        bgBtn?.addEventListener('click', () => {
          hidePopover();
          openBgPicker();
        });
        
        logoutBtn?.addEventListener('click', () => {
          hidePopover();
          if (useBootstrap && confirmLogoutModalEl) {
            const inst = new bootstrap.Modal(confirmLogoutModalEl);
            inst.show();
          } else {
            if (confirm('Deseja sair da sua conta?')) performLogout();
          }
        });

        const firstFocusable = pop.querySelector('button, a, [tabindex]:not([tabindex="-1"])');
        if (firstFocusable) firstFocusable.focus();
      });

      outsideClickHandler = (ev) => {
        const pop = document.querySelector('.popover') || document.querySelector('.fallback-popover');
        if (!pop) return;
        if (profileToggle.contains(ev.target) || pop.contains(ev.target)) return;
        hidePopover();
      };
      
      escHandler = (ev) => { 
        if (ev.key === 'Escape') hidePopover(); 
      };

      document.addEventListener('click', outsideClickHandler);
      document.addEventListener('keydown', escHandler);
    }

    async function performLogout() {
      try {
        const token = localStorage.getItem('token');
        await fetch(`${BACKEND_URL}/api/auth/logout`, { 
          method: 'POST', 
          headers: token ? { Authorization: `Bearer ${token}` } : {} 
        });
      } catch(e) {
        console.warn('Erro no logout:', e);
      } finally {
        localStorage.removeItem('token');
        try { 
          const inst = bootstrap.Modal.getInstance(confirmLogoutModalEl);
          if (inst) inst.hide();
        } catch(e) {}
        window.location.href = '/';
      }
    }

    profileToggle.addEventListener('click', toggleProfilePopover);
    profileToggle.addEventListener('keydown', (ev) => {
      if (ev.key === 'Enter' || ev.key === ' ') { 
        ev.preventDefault(); 
        toggleProfilePopover(ev); 
      }
      if (ev.key === 'Tab') hidePopover();
    });

    const confirmBtn = document.getElementById('confirmLogoutBtn');
    confirmBtn?.addEventListener('click', (ev) => { 
      ev.preventDefault(); 
      performLogout(); 
    });

    // Delegation for dynamically created popover button
    document.body.addEventListener('click', (ev) => {
      const t = ev.target;
      if (!t) return;
      if (t.id === 'popoverBgBtn' || (t.closest && t.closest('#popoverBgBtn'))) {
        openBgPicker();
      }
    });

    window.addEventListener('unload', () => { hidePopover(); });
  });
})();
</script>